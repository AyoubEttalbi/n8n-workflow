{
    "nodes": [
      {
        "parameters": {
          "conditions": {
            "options": {
              "version": 2,
              "leftValue": "",
              "caseSensitive": true,
              "typeValidation": "strict"
            },
            "combinator": "and",
            "conditions": [
              {
                "id": "5fe3c0d8-bd61-4943-b152-9e6315134520",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.first_name }}",
                "rightValue": "={{ $json.first_name }}"
              },
              {
                "id": "98a0ea91-0567-459c-bbce-06abc14a49ce",
                "operator": {
                  "name": "filter.operator.equals",
                  "type": "string",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.last_name }}",
                "rightValue": "={{ $json.last_name }}"
              },
              {
                "id": "18a96c1f-f2a0-4a2a-b789-606763df4423",
                "operator": {
                  "type": "number",
                  "operation": "equals"
                },
                "leftValue": "={{ $('Listen for Telegram Events').item.json.body.message.from.id }}",
                "rightValue": "={{ $json.id }}"
              }
            ]
          },
          "looseTypeValidation": "=",
          "options": {}
        },
        "id": "cb37e467-0aa5-45ff-87e0-85722670e371",
        "name": "Check User & Chat ID",
        "type": "n8n-nodes-base.if",
        "position": [
          600,
          -480
        ],
        "typeVersion": 2.2
      },
      {
        "parameters": {
          "chatId": "={{ $json.body.message.chat.id }}",
          "text": "=Unable to process your message.",
          "additionalFields": {
            "appendAttribution": false
          }
        },
        "id": "995272a5-8f90-49a2-8253-8cde15af2bec",
        "name": "Error message",
        "type": "n8n-nodes-base.telegram",
        "position": [
          840,
          -200
        ],
        "typeVersion": 1.2,
        "webhookId": "60a6687a-9fa1-4250-b160-4ab63333b416"
      },
      {
        "parameters": {
          "content": "# Receive Telegram Message with Webhook",
          "height": 652,
          "width": 949,
          "color": 6
        },
        "id": "b5167cf9-bcdd-4318-96f3-569b7f76f445",
        "name": "Sticky Note",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          140,
          -660
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "httpMethod": "POST",
          "path": "wbot",
          "options": {
            "binaryPropertyName": "data"
          }
        },
        "id": "a85745d2-22d9-4e81-8856-bff768230a14",
        "name": "Listen for Telegram Events",
        "type": "n8n-nodes-base.webhook",
        "position": [
          200,
          -480
        ],
        "webhookId": "097f36f3-1574-44f9-815f-58387e3b20bf",
        "typeVersion": 2
      },
      {
        "parameters": {
          "content": "# How to set up a Telegram Bot WebHook\n\n## WebHook Setup Process\n\n**Basic Concept**\nA WebHook allows your Telegram bot to automatically receive updates instead of manually polling the Bot API.\n\n**Setup Method**\nTo set a WebHook, make a GET request using this URL format:\n```\nhttps://api.telegram.org/bot{my_bot_token}/setWebhook?url={url_to_send_updates_to}\n```\nWhere:\n- `my_bot_token`: Your bot token from BotFather\n- `url_to_send_updates_to`: Your HTTPS endpoint that handles bot updates\n\n\n**Verification**\nTo verify the WebHook setup, use:\n```\nhttps://api.telegram.org/bot{my_bot_token}/getWebhookInfo\n```\n\nA successful response looks like:\n```json\n{\n \"ok\": true,\n \"result\": {\n   \"url\": \"https://www.example.com/my-telegram-bot/\",\n   \"has_custom_certificate\": false,\n   \"pending_update_count\": 0,\n   \"max_connections\": 40\n }\n}\n```\n\n\nThis method provides a simple and efficient way to handle Telegram bot updates automatically through webhooks rather than manual polling.",
          "height": 860,
          "width": 800,
          "color": 7
        },
        "id": "d82a77ec-7396-4e0d-a8bc-004517d014fb",
        "name": "Sticky Note1",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          -700,
          -660
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "assignments": {
            "assignments": [
              {
                "id": "0cea6da1-652a-4c1e-94c3-30608ced90f8",
                "name": "first_name",
                "type": "string",
                "value": "FirstName"
              },
              {
                "id": "b90280c6-3e36-49ca-9e7e-e15c42d256cc",
                "name": "last_name",
                "type": "string",
                "value": "LastName"
              },
              {
                "id": "f6d86283-16ca-447e-8427-7d3d190babc0",
                "name": "id",
                "type": "number",
                "value": 12345667891
              }
            ]
          },
          "includeOtherFields": true,
          "options": {}
        },
        "id": "0de4a018-fe62-447b-975d-ec5f4a476701",
        "name": "Validation",
        "type": "n8n-nodes-base.set",
        "position": [
          420,
          -480
        ],
        "typeVersion": 3.4
      },
      {
        "parameters": {
          "content": "## Validate Telegram User\n",
          "height": 260,
          "width": 420,
          "color": 7
        },
        "id": "4bab4da1-5e44-452f-bd49-bb1339d0e7e2",
        "name": "Sticky Note4",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          360,
          -540
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "rules": {
            "values": [
              {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "operator": {
                        "type": "object",
                        "operation": "exists",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.body.message.voice }}",
                      "rightValue": ""
                    }
                  ]
                },
                "renameOutput": true,
                "outputKey": "audio"
              },
              {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "342f0883-d959-44a2-b80d-379e39c76218",
                      "operator": {
                        "type": "string",
                        "operation": "exists",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.body.message.text }}",
                      "rightValue": ""
                    }
                  ]
                },
                "renameOutput": true,
                "outputKey": "text"
              },
              {
                "conditions": {
                  "options": {
                    "version": 2,
                    "leftValue": "",
                    "caseSensitive": true,
                    "typeValidation": "strict"
                  },
                  "combinator": "and",
                  "conditions": [
                    {
                      "id": "ded3a600-f861-413a-8892-3fc5ea935ecb",
                      "operator": {
                        "type": "array",
                        "operation": "exists",
                        "singleValue": true
                      },
                      "leftValue": "={{ $json.body.message.photo }}",
                      "rightValue": ""
                    }
                  ]
                },
                "renameOutput": true,
                "outputKey": "image"
              }
            ]
          },
          "options": {
            "fallbackOutput": "extra"
          }
        },
        "id": "90fc210d-a3a8-443c-a929-d3c157403fc6",
        "name": "Message Router",
        "type": "n8n-nodes-base.switch",
        "position": [
          840,
          -480
        ],
        "typeVersion": 3.2
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "={{ $('Message Router').item.json.body.message.text }}",
          "options": {
            "systemMessage": "=## ROLE  \nYou are a friendly, attentive, and helpful AI assistant. Your primary goal is to assist the user while maintaining a personalized and engaging interaction. The current user's first name is **{{ $json.body.message.from.first_name }}**.\n\n---\n\n## RULES  \n\n1. **Memory Management**:  \n   - When the user sends a new message, evaluate whether it contains noteworthy or personal information (e.g., preferences, habits, goals, or important events).  \n   - If such information is identified, use the **Save Memory** tool to store this data in memory.  \n   - Always send a meaningful response back to the user, even if your primary action was saving information. This response should not reveal that information was stored but should acknowledge or engage with the user’s input naturally.\n\n2. **Context Awareness**:  \n   - Use stored memories to provide contextually relevant and personalized responses.  \n   - Always consider the **date and time** when a memory was collected to ensure your responses are up-to-date and accurate.\n\n3. **User-Centric Responses**:  \n   - Tailor your responses based on the user's preferences and past interactions.  \n   - Be proactive in recalling relevant details from memory when appropriate but avoid overwhelming the user with unnecessary information.\n\n4. **Privacy and Sensitivity**:  \n   - Handle all user data with care and sensitivity. Avoid making assumptions or sharing stored information unless it directly enhances the conversation or task at hand.\n\n5. **Fallback Responses**:  \n   - **IMPORTANT** If no specific task or question arises from the user’s message (e.g., when only saving information), respond in a way that keeps the conversation flowing naturally. For example:\n     - Acknowledge their input: “Thanks for sharing that!” \n     - Provide a friendly follow-up: “Is there anything else I can help you with today?”\n   - DO NOT tell Jokes as a fall back response.\n\n---\n\n## TOOLS  \n\n### Save Memory  \n- Use this tool to store summarized, concise, and meaningful information about the user.  \n- Extract key details from user messages that could enhance future interactions (e.g., likes/dislikes, important dates, hobbies).  \n- Ensure that the summary is clear and devoid of unnecessary details.\n\n---\n\n## MEMORIES  \n\n### Recent Noteworthy Memories  \nHere are the most recent memories collected from the user, including their date and time of collection:  \n\n**{{ $('Retrieve Long Term Memories').item.json.content }}**\n\n### Guidelines for Using Memories:  \n- Prioritize recent memories but do not disregard older ones if they remain relevant.  \n- Cross-reference memories to maintain consistency in your responses. For example, if a user shares conflicting preferences over time, clarify or adapt accordingly.\n\n---\n\n## ADDITIONAL INSTRUCTIONS  \n\n- Think critically before responding to ensure your answers are thoughtful and accurate.  \n- Strive to build trust with the user by being consistent, reliable, and personable in your interactions.  \n- Avoid robotic or overly formal language; aim for a conversational tone that aligns with being \"friendly and helpful.\"  \n"
          }
        },
        "id": "84abac7b-9124-4289-bd71-6ce16e4d7253",
        "name": "AI Agent",
        "type": "@n8n/n8n-nodes-langchain.agent",
        "position": [
          1540,
          -300
        ],
        "typeVersion": 1.7,
        "alwaysOutputData": true,
        "onError": "continueErrorOutput"
      },
      {
        "parameters": {
          "mode": "combine",
          "combineBy": "combineAll",
          "options": {}
        },
        "id": "5e1160f7-bf6b-4a7f-a970-41383a8c5433",
        "name": "Merge",
        "type": "n8n-nodes-base.merge",
        "position": [
          1540,
          -540
        ],
        "typeVersion": 3
      },
      {
        "parameters": {
          "sessionIdType": "customKey",
          "sessionKey": "={{ $json.id }}",
          "contextWindowLength": 50
        },
        "id": "a8bcc26d-eb93-4218-a2ac-53a5ee44f5a8",
        "name": "Window Buffer Memory",
        "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "position": [
          1600,
          140
        ],
        "typeVersion": 1.3
      },
      {
        "parameters": {
          "options": {}
        },
        "id": "06a26934-45e5-48e9-8056-07d593a158ad",
        "name": "When chat message received",
        "type": "@n8n/n8n-nodes-langchain.chatTrigger",
        "position": [
          200,
          -220
        ],
        "webhookId": "701ddc24-2637-466e-9789-5d47145333a8",
        "typeVersion": 1.1,
        "disabled": true
      },
      {
        "parameters": {
          "content": "# Process Text Message",
          "height": 1029,
          "width": 1033,
          "color": 5
        },
        "id": "32a6f8dd-11b7-4f36-ab71-a566c9b676bc",
        "name": "Sticky Note10",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1120,
          -660
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
          "text": "={{ $json.output }}",
          "additionalFields": {
            "appendAttribution": false,
            "parse_mode": "HTML"
          }
        },
        "id": "df4f7c77-fc97-4bc0-9607-4771dd63d869",
        "name": "Telegram Response",
        "type": "n8n-nodes-base.telegram",
        "position": [
          1920,
          -480
        ],
        "typeVersion": 1.2,
        "webhookId": "86659ad1-ba90-44a6-ad2a-25734510097b"
      },
      {
        "parameters": {
          "descriptionType": "manual",
          "toolDescription": "Save memories",
          "operation": "update",
          "documentURL": "[Google Doc ID]",
          "actionsUi": {
            "actionFields": [
              {
                "action": "insert",
                "text": "= Memory: {{ $fromAI('memory') }} - Date: {{ $now }} "
              }
            ]
          }
        },
        "id": "abe48dfb-df0b-407a-bb05-fc664d4d0d21",
        "name": "Save Long Term Memories",
        "type": "n8n-nodes-base.googleDocsTool",
        "position": [
          1940,
          140
        ],
        "typeVersion": 2
      },
      {
        "parameters": {
          "content": "## Retrieve Long Term Memories\nGoogle Docs",
          "height": 340,
          "width": 300,
          "color": 4
        },
        "id": "46b9ffa6-58fa-4d99-ba5c-d457c9e29d33",
        "name": "Sticky Note3",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1140,
          -420
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "operation": "get",
          "documentURL": "[Google Doc ID]"
        },
        "id": "0161ddb7-5241-4c53-89b9-35ec2495064a",
        "name": "Retrieve Long Term Memories",
        "type": "n8n-nodes-base.googleDocs",
        "position": [
          1240,
          -280
        ],
        "typeVersion": 2,
        "alwaysOutputData": true
      },
      {
        "parameters": {
          "content": "## Save To Current Chat Memory (Optional)",
          "height": 320,
          "width": 280
        },
        "id": "9a48471a-6e34-4907-a76c-ed653850425b",
        "name": "Sticky Note5",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1500,
          20
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "content": "## Save Long Term Memories\nGoogle Docs",
          "height": 320,
          "width": 280,
          "color": 4
        },
        "id": "654f7e71-5058-4980-b3c6-d1c3e4e0064b",
        "name": "Sticky Note6",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          1840,
          20
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "chatId": "={{ $('Listen for Telegram Events').item.json.body.message.chat.id }}",
          "text": "=Unable to process your message.",
          "additionalFields": {
            "appendAttribution": false
          }
        },
        "id": "8f48777a-f3d4-4c7b-aa0d-6b3f44d2984d",
        "name": "Response Error message",
        "type": "n8n-nodes-base.telegram",
        "position": [
          1920,
          -280
        ],
        "typeVersion": 1.2,
        "webhookId": "d03ca282-638a-4c0b-a7ec-b74bc6e08150"
      },
      {
        "parameters": {
          "content": "# DeepSeek API Call\n\nThe DeepSeek API uses an API format compatible with OpenAI. By modifying the configuration, you can use the OpenAI SDK or softwares compatible with the OpenAI API to access the DeepSeek API.\n\nhttps://api-docs.deepseek.com/\n\n## Configuration Parameters\n\n| Parameter | Value |\n|-----------|--------|\n| base_url | https://api.deepseek.com |\n| api_key | https://platform.deepseek.com/api_keys |\n\n\n\n## Important Notes\n\n- To be compatible with OpenAI, you can also use `https://api.deepseek.com/v1` as the base_url. Note that the v1 here has NO relationship with the model's version.\n\n- The deepseek-chat model has been upgraded to DeepSeek-V3. The API remains unchanged. You can invoke DeepSeek-V3 by specifying `model='deepseek-chat'`.\n\n- deepseek-reasoner is the latest reasoning model, DeepSeek-R1, released by DeepSeek. You can invoke DeepSeek-R1 by specifying `model='deepseek-reasoner'`.",
          "height": 600,
          "width": 820,
          "color": 7
        },
        "id": "c8f82275-0b6b-4284-8e87-f772c20b9789",
        "name": "Sticky Note12",
        "type": "n8n-nodes-base.stickyNote",
        "position": [
          620,
          20
        ],
        "typeVersion": 1
      },
      {
        "parameters": {
          "model": "=deepseek-reasoner",
          "options": {}
        },
        "id": "a4057aef-f9bb-4575-9cbc-c9c7e27732b0",
        "name": "DeepSeek-R1 Reasoning",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "position": [
          1120,
          240
        ],
        "typeVersion": 1.1
      },
      {
        "parameters": {
          "model": "=deepseek-chat",
          "options": {}
        },
        "id": "8dab620b-fdfe-4f6b-be1d-5d28c58139f1",
        "name": "DeepSeek-V3   Chat",
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "position": [
          1280,
          240
        ],
        "typeVersion": 1.1
      }
    ],
    "connections": {
      "Check User & Chat ID": {
        "main": [
          [
            {
              "node": "Message Router",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Error message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Listen for Telegram Events": {
        "main": [
          [
            {
              "node": "Validation",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Validation": {
        "main": [
          [
            {
              "node": "Check User & Chat ID",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Message Router": {
        "main": [
          [],
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 0
            },
            {
              "node": "Retrieve Long Term Memories",
              "type": "main",
              "index": 0
            }
          ],
          [],
          [
            {
              "node": "Error message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent": {
        "main": [
          [
            {
              "node": "Telegram Response",
              "type": "main",
              "index": 0
            }
          ],
          [
            {
              "node": "Response Error message",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Merge": {
        "main": [
          [
            {
              "node": "AI Agent",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Save Long Term Memories": {
        "ai_tool": [
          [
            {
              "node": "AI Agent",
              "type": "ai_tool",
              "index": 0
            }
          ]
        ]
      },
      "Retrieve Long Term Memories": {
        "main": [
          [
            {
              "node": "Merge",
              "type": "main",
              "index": 1
            }
          ]
        ]
      },
      "DeepSeek-V3   Chat": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "templateCredsSetupCompleted": true,
      "instanceId": "98d3386647e9203eb5810cfaf0176a546d2c22579a8a17964771ac3c82318cb2"
    }
  }